/* Copyright 2025 The ChromiumOS Authors
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

#include <cros/cbi_flash.dtsi>
#include "../ite_generated.dtsi"
#include "../interrupts.dtsi"
#include "../ite_common.dtsi"
#include "../ite_keyboard.dtsi"
#include "../ite_overlay.dtsi"
#include "../ite_usbc.dtsi"
#include "../power_signal.dtsi"
#include "../usba.dtsi"
#include "cbi.dtsi"
#include "led_pins.dtsi"
#include "led_policy.dtsi"
#include "motionsense.dtsi"

/ {
	batteries {
		default_battery: placeholder {
			compatible = "smp,c31n2005", "battery-smart";
		};
	};

	named-gpios {
		/delete-node/ ec_kso_02_inv;
		/delete-node/ en_pp5000_z1;

		gpio_edp_bl_en_3v3: edp_bl_en_3v3 {
			gpios = <&gpiob 6 GPIO_INPUT>;
		};
		gpio_ec_tchscr_report_en: ec_tchscr_report_en {
			gpios = <&gpioh 3 GPIO_OUTPUT>;
		};
	};

	gpio-interrupts {
		int_imu: ec-imu {
			handler = "bma4xx_interrupt";
		};
	};

	unused-pins {
		compatible = "unused-gpios";
		unused-gpios =
			<&gpiob 7 GPIO_INPUT_PULL_DOWN>,
			<&gpiof 0 GPIO_INPUT_PULL_DOWN>,
			<&gpiof 1 GPIO_INPUT_PULL_DOWN>,
			<&gpiof 4 GPIO_INPUT_PULL_DOWN>,
			<&gpiog 3 GPIO_OUTPUT_HIGH>,
			<&gpiog 4 GPIO_OUTPUT_HIGH>,
			<&gpiog 5 GPIO_OUTPUT_HIGH>,
			<&gpiog 7 GPIO_OUTPUT_HIGH>,
			<&gpioh 1 GPIO_INPUT_PULL_DOWN>,
			<&gpioh 2 GPIO_INPUT_PULL_DOWN>,
			<&gpioi 1 GPIO_INPUT_PULL_DOWN>,
			<&gpioi 5 GPIO_INPUT_PULL_DOWN>,
			<&gpioj 2 GPIO_INPUT_PULL_DOWN>;
	};

	cros-keyscan {
		compatible = "cros-ec,keyscan";

		actual-key-mask = <
			0x08  /* C0 */
			0xff  /* C1 */
			0xff  /* C2 */
			0xff  /* C3 */
			0xff  /* C4 */
			0xff  /* C5 */
			0xff  /* C6 */
			0xa0  /* C7 */
			0xff  /* C8 */
			0xff  /* C9 */
			0x01  /* C10 */
			0xff  /* C11 */
			0xff  /* C12 */
			0x40  /* C13 */
			0x0a  /* C14 */
			0x40  /* C15 */
			0x03  /* C16 */
			0xc6  /* C17 */
		>;
	};
};

&cros_kb_raw {
	pinctrl-0 = <&ksi0_default
		     &ksi1_default
		     &ksi2_default
		     &ksi3_default
		     &ksi4_default
		     &ksi5_default
		     &ksi6_default
		     &ksi7_default
		     &kso0_default
		     &kso1_default
		     &kso3_default
		     &kso4_default
		     &kso5_default
		     &kso6_default
		     &kso7_default
		     &kso8_default
		     &kso9_default
		     &kso10_default
		     &kso11_default
		     &kso12_default
		     &kso13_default
		     &kso14_default
		     &kso15_default
		     &kso16_default
		     &kso17_default>;
};

&pwm3 {
	prescaler-cx = <PWM_PRESCALER_C4>;
};

&sha0 {
	status = "okay";
};

/*
 * When CBI in flash is enabled, setup RO flash layout as follows:
 *   RO binary:    0x00000:0x5DFFF
 *   FMAP:         0x5DC00:0x5DFFF
 *   CBI flash:    0x5E000:0x5EFFF
 *   PSTATE block: 0x5F000:0x5FFFF
 */
&binman {
	wp-ro {
		/*
		 * Delete the pstate node so that we can force it to be the
		 * last sub-section. binman doesn't handle sub-sections with
		 * out of order offsets.
		 */
		 /delete-node/ pstate;

		 ec-ro {
			fmap {
				offset =  <(0x60000 - (0x1000 * 2) - 0x400)>;
				/*
				* don't specify 'size = <0x400>' here so
				* it is auto-assigned to the fmap size.
				*/
			};
		};
		cbi {
			offset = <(0x60000 - (0x1000 * 2))>;
			size = <0x1000>;
		};
		pstate {
			type = "section";
			offset = <(0x60000 - (0x1000 * 1))>;
			size = <0x1000>;
		};
	};
};
