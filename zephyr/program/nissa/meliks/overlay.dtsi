/* Copyright 2025 The ChromiumOS Authors
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

#include <cros/thermistor/thermistor.dtsi>
#include <dt-bindings/usbc_mux.h>
#include <dt-bindings/usb_pd_tcpm.h>

/ {

	named-adc-channels {
		compatible = "named-adc-channels";

		adc_ec_vsense_pp1050_proc: ec_vsense_pp1050_proc {
			enum-name = "ADC_PP1050_PROC";
			io-channels = <&adc0 4>;
		};
		adc_ec_vsense_pp3300_s5: ec_vsense_pp3300_s5 {
			enum-name = "ADC_PP3300_S5";
			io-channels = <&adc0 6>;
		};
		adc_temp_sensor_1: temp_sensor_1 {
			enum-name = "ADC_TEMP_SENSOR_1";
			io-channels = <&adc0 0>;
		};
		adc_temp_sensor_2: temp_sensor_2 {
			enum-name = "ADC_TEMP_SENSOR_2";
			io-channels = <&adc0 1>;
		};
		adc_temp_sensor_3: temp_sensor_3 {
			enum-name = "ADC_TEMP_SENSOR_3";
			io-channels = <&adc0 10>;
		};
		adc_temp_sensor_4: temp_sensor_4 {
			enum-name = "ADC_TEMP_SENSOR_4";
			io-channels = <&adc0 11>;
		};
	};

	aliases {
		gpio-cbi-wp = &gpio_ec_cbi_wp;
		gpio-wp = &gpio_ec_wp_odl;
		gpio-kbd-kso2 = &gpio_ec_kso_02_inv;
	};

	ec-console {
		compatible = "ec-console";
		disabled = "events", "lpc", "hostcmd";
	};

	batteries {
		sdi_4404d57m {
			compatible = "sdi,4404d57m", "battery-smart";
		};

		default_battery: sdi_4404d57 {
			compatible = "sdi,4404d57", "battery-smart";
		};
	};

	hibernate-wake-pins {
		compatible = "cros-ec,hibernate-wake-pins";
		wakeup-irqs = <
			&int_power_button
			&int_lid_open
		>;
	};

	gpio-interrupts {
		compatible = "cros-ec,gpio-interrupts";

		int_power_button: power_button {
			irq-pin = <&gpio_gsc_ec_pwr_btn_odl>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "power_button_interrupt";
		};
		int_lid_open: lid_open {
			irq-pin = <&gpio_lid_open>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "lid_interrupt";
		};
		int_imu: ec_imu {
			irq-pin = <&gpio_imu_int_l>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "lsm6dsm_interrupt";
		};
		int_lid_accel: ec_lid_accel {
			irq-pin = <&gpio_acc_int_l>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "lis2ds_interrupt";
		};
		int_vol_down: vol_down {
			irq-pin = <&gpio_voldn_btn_odl>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "button_interrupt";
		};
		int_vol_up: vol_up {
			irq-pin = <&gpio_volup_btn_odl>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "button_interrupt";
		};
		int_usb_c0: usb_c0 {
			irq-pin = <&gpio_usb_c0_int_odl>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "usb_interrupt";
		};
		int_usb_c1: usb_c1 {
			irq-pin = <&gpio_sb_1>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "usb_interrupt";
		};
		int_pannel_power_change: pannel_power_change {
			irq-pin = <&gpio_ec_en_pp1800_panel_x>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "panel_power_change_interrupt";
		};
		int_lcd_rst_n: lcd_rst_n {
			irq-pin = <&gpio_lcd_rst_n>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "lcd_reset_change_interrupt";
		};
	};

	named-gpios {
		compatible = "named-gpios";

		gpio_acc_int_l: acc_int_l {
			gpios = <&gpio5 0 GPIO_INPUT>;
		};
		gpio_all_sys_pwrgd: all_sys_pwrgd {
			gpios = <&gpioa 7 GPIO_INPUT>;
		};
		gpio_ccd_mode_odl: ccd_mode_odl {
			gpios = <&gpioe 5 GPIO_INPUT>;
			enum-name = "GPIO_CCD_MODE_ODL";
		};
		gpio_cpu_c10_gate_l: cpu_c10_gate_l {
			gpios = <&gpio6 7 GPIO_INPUT>;
		};
		gpio_ec_battery_pres_odl: ec_battery_pres_odl {
			gpios = <&gpioa 3 GPIO_INPUT>;
			enum-name = "GPIO_BATT_PRES_ODL";
		};
		gpio_ec_cbi_wp: ec_cbi_wp {
			gpios = <&gpio7 4 GPIO_OUTPUT>;
		};
		gpio_ec_edp_bl_en_od: ec_edp_bl_en_od {
			gpios = <&gpiod 3 GPIO_ODR_HIGH>;
			enum-name = "GPIO_ENABLE_BACKLIGHT";
		};
		gpio_ec_entering_rw: ec_entering_rw {
			gpios = <&gpio0 3 GPIO_OUTPUT>;
			enum-name = "GPIO_ENTERING_RW";
		};
		gpio_ec_gsc_packet_mode: ec_gsc_packet_mode {
			gpios = <&gpio7 5 GPIO_OUTPUT>;
			enum-name = "GPIO_PACKET_MODE_EN";
		};
		gpio_ec_kso_02_inv: ec_kso_02_inv {
			gpios = <&gpio1 7 (GPIO_OUTPUT | GPIO_ACTIVE_HIGH)>;
		};
		gpio_ec_pch_wake_odl: ec_pch_wake_odl {
			gpios = <&gpiob 0 GPIO_ODR_LOW>;
		};
		gpio_ec_prochot_odl: ec_prochot_odl {
			gpios = <&gpiof 1 GPIO_ODR_HIGH>;
		};
		gpio_ec_soc_dsw_pwrok: ec_soc_dsw_pwrok {
			gpios = <&gpio6 1 GPIO_OUTPUT>;
		};
		gpio_ec_soc_hdmi_hpd: ec_soc_hdmi_hpd {
			gpios = <&gpioe 4 GPIO_OUTPUT>;
		};
		gpio_ec_soc_int_odl: ec_soc_int_odl {
			gpios = <&gpio8 0 GPIO_ODR_HIGH>;
			enum-name = "GPIO_EC_INT_L";
		};
		gpio_ec_soc_pch_pwrok_od: ec_soc_pch_pwrok_od {
			gpios = <&gpio7 2 GPIO_ODR_HIGH>;
		};
		gpio_ec_soc_pwr_btn_odl: ec_soc_pwr_btn_odl {
			gpios = <&gpioc 1 GPIO_ODR_HIGH>;
			enum-name = "GPIO_PCH_PWRBTN_L";
		};
		gpio_ec_soc_rsmrst_l: ec_soc_rsmrst_l {
			gpios = <&gpioa 6 GPIO_OUTPUT>;
		};
		gpio_ec_soc_rtcrst: ec_soc_rtcrst {
			gpios = <&gpio7 6 GPIO_OUTPUT>;
		};
		gpio_ec_soc_sys_pwrok: ec_soc_sys_pwrok {
			gpios = <&gpio3 7 GPIO_OUTPUT>;
		};
		gpio_ec_soc_vccst_pwrgd_od: ec_soc_vccst_pwrgd_od {
			gpios = <&gpioa 4 GPIO_ODR_HIGH>;
		};
		gpio_ec_wp_odl: ec_wp_odl {
			gpios = <&gpioa 1 (GPIO_INPUT | GPIO_ACTIVE_LOW)>;
		};
		gpio_en_pp3300_s5: en_pp3300_s5 {
			gpios = <&gpiob 6 GPIO_OUTPUT>;
			enum-name = "GPIO_TEMP_SENSOR_POWER";
		};
		gpio_en_pp5000_s5: en_pp5000_s5 {
			gpios = <&gpio4 0 GPIO_OUTPUT>;
		};
		gpio_en_slp_z: en_slp_z {
			gpios = <&gpioe 1 GPIO_OUTPUT>;
		};
		gpio_gsc_ec_pwr_btn_odl: gsc_ec_pwr_btn_odl {
			gpios = <&gpio0 0 GPIO_INPUT_PULL_UP>;
			enum-name = "GPIO_POWER_BUTTON_L";
		};
		gpio_imu_int_l: imu_int_l {
			gpios = <&gpio5 6 GPIO_INPUT>;
		};
		gpio_imvp91_vrrdy_od: imvp91_vrrdy_od {
			gpios = <&gpio4 3 GPIO_INPUT>;
		};
		gpio_lid_open: lid_open {
			gpios = <&gpiod 2 GPIO_INPUT>;
			enum-name = "GPIO_LID_OPEN";
		};
		gpio_soc_caterr_n: soc_caterr_n {
			gpios = <&gpio9 6 GPIO_INPUT>;
		};
		gpio_pg_pp1050_mem_s3_od: pg_pp1050_mem_s3_od {
			gpios = <&gpiof 0 GPIO_INPUT>;
		};
		gpio_pg_pp5000_s5_od: pg_pp5000_s5_od {
			gpios = <&gpio4 2 GPIO_INPUT>;
		};
		gpio_rsmrst_pwrgd_l: rsmrst_pwrgd_l {
			gpios = <&gpio9 4 GPIO_INPUT_PULL_UP>;
		};
		gpio_slp_s0_l: slp_s0_l {
			gpios = <&gpio9 7 GPIO_INPUT>;
		};
		gpio_slp_s3_l: slp_s3_l {
			gpios = <&gpioa 5 GPIO_INPUT>;
		};
		gpio_slp_s4_l: slp_s4_l {
			gpios = <&gpio7 0 GPIO_INPUT>;
		};
		gpio_slp_sus_l: slp_sus_l {
			gpios = <&gpio6 2 GPIO_INPUT>;
		};
		gpio_sys_rst_odl: sys_rst_odl {
			gpios = <&gpioc 5 GPIO_ODR_HIGH>;
		};
		gpio_usb_c0_int_odl: usb_c0_int_odl {
			gpios = <&gpio0 1 GPIO_INPUT_PULL_UP>;
		};
		gpio_vccin_aux_vid0: vccin_aux_vid0 {
			gpios = <&gpio9 2 (GPIO_INPUT | GPIO_VOLTAGE_1P8)>;
		};
		gpio_vccin_aux_vid1: vccin_aux_vid1 {
			gpios = <&gpioe 3 (GPIO_INPUT | GPIO_VOLTAGE_1P8)>;
		};
		gpio_voldn_btn_odl: voldn_btn_odl {
			gpios = <&gpioa 2 GPIO_INPUT_PULL_UP>;
			enum-name = "GPIO_VOLUME_DOWN_L";
		};
		gpio_volup_btn_odl: volup_btn_odl {
			gpios = <&gpio9 3 GPIO_INPUT_PULL_UP>;
			enum-name = "GPIO_VOLUME_UP_L";
		};
		gpio_ec_chg_led_r: ec_chg_led_r {
			gpios = <&gpioc 4 GPIO_OUTPUT_HIGH>;
		};
		gpio_ec_chg_led_g: ec_chg_led_g {
			gpios = <&gpioc 2 GPIO_OUTPUT_HIGH>;
		};
		gpio_ec_chg_led_b: ec_chg_led_b {
			gpios = <&gpioc 3 GPIO_OUTPUT_HIGH>;
		};
		gpio_ec_en_pp1800_panel_x: ec_en_pp1800_panel_x {
			gpios = <&gpio7 3 (GPIO_INPUT | GPIO_VOLTAGE_1P8)>;
		};
		gpio_ec_tsp_ta: ec_tsp_ta {
			gpios = <&gpio6 3 GPIO_OUTPUT_LOW>;
		};
		gpio_lcd_rst_n: lcd_rst_n {
			gpios = <&gpioa 0 GPIO_INPUT>;
		};

		gpio_sb_1: sb-1 {
			gpios = <&gpio0 2 GPIO_INPUT>;
			no-auto-init;
		};

		gpio_sb_2: en_sub_usb_a1_vbus {
			gpios = <&gpiod 4 GPIO_OUTPUT>;
		};

		/*
		 * Set I2C pins for type C sub-board to be low voltage (I2C5_1).
		 * We do this for all boards, since the pins are 3.3V tolerant,
		 * and the only 2 types of sub-boards used on nivviks both have
		 * type-C ports on them.
		 */
		gpio_sb_3: sb-3 {
			gpios = <&gpiof 4 (GPIO_OPEN_DRAIN | GPIO_VOLTAGE_1P8)>;
			no-auto-init;
		};
		gpio_sb_4: sb-4 {
			gpios = <&gpiof 5 (GPIO_INPUT | GPIO_VOLTAGE_1P8)>;
			no-auto-init;
		};
		ec-i2c-sensor-scl {
			gpios = <&gpio9 0 (GPIO_INPUT | GPIO_VOLTAGE_1P8)>;
		};
		ec-i2c-sensor-sda {
			gpios = <&gpio8 7 (GPIO_INPUT | GPIO_VOLTAGE_1P8)>;
		};
	};

	named-i2c-ports {
		compatible = "named-i2c-ports";

		i2c_ec_i2c_eeprom: ec_i2c_eeprom {
			i2c-port = <&i2c0_0>;
			enum-names = "I2C_PORT_EEPROM";
		};
		i2c_ec_i2c_sensor: ec_i2c_sensor {
			i2c-port = <&i2c1_0>;
			enum-names = "I2C_PORT_SENSOR";
		};
		i2c_ec_i2c_usb_c0: ec_i2c_usb_c0 {
			i2c-port = <&i2c3_0>;
			enum-names = "I2C_PORT_USB_C0_TCPC";
		};
		i2c_lcd: lcd {
			i2c-port = <&i2c4_1>;
			enum-names = "I2C_PORT_LCD",
						"I2C_PORT_MP2964";
		};
		i2c_ec_i2c_sub_usb_c1: ec_i2c_sub_usb_c1 {
			i2c-port = <&i2c5_1>;
			enum-names = "I2C_PORT_USB_C1_TCPC";
		};
		i2c_ec_i2c_batt: ec_i2c_batt {
			i2c-port = <&i2c7_0>;
			enum-names = "I2C_PORT_BATTERY";
		};
	};

	/*
	 * Aliases used for sub-board GPIOs.
	 */
	aliases {
		/*
		 * Input GPIO when used with type-C port 1
		 * Output when used with HDMI sub-board
		 */
		gpio-usb-c1-int-odl = &gpio_sb_1;
		gpio-en-rails-odl = &gpio_sb_1;
		/*
		 * Sub-board with type A USB, enable.
		 */
		gpio-en-usb-a1-vbus = &gpio_sb_2;
		/*
		 * Enable S5 rails for LTE sub-board
		 */
		gpio-en-sub-s5-rails = &gpio_sb_2;
	};

	temp_memory: memory {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_1>;
	};
	temp_charger: charger {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_2>;
	};
	temp_ambient: ambient {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_3>;
	};
	temp_sub_charger: sub_charger {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_4>;
	};

	named-temp-sensors {
		compatible = "cros-ec,temp-sensors";
		memory {
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_memory>;
		};
		charger {
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_charger>;
		};
		ambient {
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_ambient>;
		};
		sub_charger {
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_sub_charger>;
		};
	};

	usbc {
		#address-cells = <1>;
		#size-cells = <0>;

		port0@0 {
			compatible = "named-usbc-port";
			reg = <0>;
			bc12 = <&bc12_port0>;
			chg = <&chg_port0>;
			tcpc = <&tcpc_port0>;
			usb-mux-chain-0 {
				compatible = "cros-ec,usb-mux-chain";
				usb-muxes = <&virtual_mux_0>;
			};
		};
		port0-muxes {
			virtual_mux_0: virtual-mux-0 {
				compatible = "cros-ec,usbc-mux-virtual";
			};
		};
		/*
		 * TODO(b:211693800): port1 may not be present on some
		 * sub-boards.
		 */
		port1@1 {
			compatible = "named-usbc-port";
			reg = <1>;
			bc12 = <&bc12_port1>;
			chg = <&chg_port1>;
			tcpc = <&tcpc_port1>;
			usb-mux-chain-1 {
				compatible = "cros-ec,usb-mux-chain";
				usb-muxes = <&virtual_mux_1 &anx7483_mux_1>;
			};
			usb_mux_chain_1_no_mux: usb-mux-chain-1-no-mux {
				compatible = "cros-ec,usb-mux-chain";
				alternative-chain;
				usb-muxes = <&virtual_mux_1>;
			};
		};
		port1-muxes {
			virtual_mux_1: virtual-mux-1 {
				compatible = "cros-ec,usbc-mux-virtual";
			};
		};
	};

	 /*
	  * Declare unused GPIOs so that they are shut down
	  * and use minimal power
	  */
	  unused-pins {
		compatible = "unused-gpios";
		unused-gpios =
			<&gpio0 4 0>,
			<&gpio3 2 0>,
			<&gpio3 3 0>,
			<&gpio3 5 0>,
			<&gpio3 6 0>,
			<&gpio5 7 0>,
			<&gpio6 0 0>,
			<&gpio6 6 0>,
			<&gpio8 2 0>,
			<&gpio8 3 0>,
			<&gpio8 6 0>,
			<&gpio9 1 0>,
			<&gpio9 5 0>,
			<&gpiob 1 0>,
			<&gpiob 7 0>,
			<&gpioc 0 0>,
			<&gpioc 6 0>,
			<&gpiod 5 0>,
			<&gpioe 2 0>;
	 };
};

&thermistor_3V3_51K1_47K_4050B {
	status = "okay";
};

&adc_ec_vsense_pp3300_s5 {
	/*
	 * Voltage divider on input has 47k upper and 220k lower legs with
	 * 2714 mV full-scale reading on the ADC. Apply the largest possible
	 * multiplier (without overflowing int32) to get the best possible
	 * approximation of the actual ratio, but derate by a factor of two to
	 * ensure unexpectedly high values won't overflow.
	 */
	mul = <(791261 / 2)>;
	div = <(651975 / 2)>;
};

&adc0 {
	status = "okay";
	pinctrl-0 = <&adc0_chan0_gp45
		     &adc0_chan1_gp44
		     &adc0_chan4_gp41
		     &adc0_chan6_gp34
		     &adc0_chan10_gpe0
		     &adc0_chan11_gpc7>;
	pinctrl-names = "default";
};

&i2c0_0 {
	status = "okay";
	pinctrl-0 = <&i2c0_0_sda_scl_gpb4_b5>;
	pinctrl-names = "default";
};

&i2c1_0 {
	status = "okay";
	pinctrl-0 = <&i2c1_0_sda_scl_gp87_90>;
	pinctrl-names = "default";
};

&i2c3_0 {
	status = "okay";
	pinctrl-0 = <&i2c3_0_sda_scl_gpd0_d1>;
	pinctrl-names = "default";
};

&i2c4_1 {
	status = "okay";
	pinctrl-0 = <&i2c4_1_sda_scl_gpf2_f3>;
	pinctrl-names = "default";
};

&i2c5_1 {
	status = "okay";
	pinctrl-0 = <&i2c5_1_sda_scl_gpf4_f5>;
	pinctrl-names = "default";
};

&i2c7_0 {
	status = "okay";
	pinctrl-0 = <&i2c7_0_sda_scl_gpb2_b3>;
	pinctrl-names = "default";
};

&i2c_ctrl0 {
	status = "okay";
};

&i2c_ctrl1 {
	status = "okay";
};

&i2c_ctrl3 {
	status = "okay";
};

&i2c_ctrl4 {
	status = "okay";
};

&i2c_ctrl5 {
	status = "okay";
};

&i2c_ctrl7 {
	status = "okay";
};

/* Set bus speeds for I2C */
&i2c0_0 {
	label = "I2C_EEPROM";
	clock-frequency = <I2C_BITRATE_FAST>;

	cbi_eeprom: eeprom@50 {
		compatible = "atmel,at24";
		reg = <0x50>;
		size = <2048>;
		pagesize = <16>;
		address-width = <8>;
		timeout = <5>;
	};
};

&i2c1_0 {
	label = "I2C_SENSOR";
	clock-frequency = <I2C_BITRATE_FAST>;
};

&i2c3_0 {
	label = "I2C_USB_C0_TCPC";
	clock-frequency = <I2C_BITRATE_FAST_PLUS>;

	bc12_port0: pi3usb9201@5f {
		compatible = "pericom,pi3usb9201";
		status = "okay";
		reg = <0x5f>;
		/*
		 * BC1.2 interrupt is shared with TCPC, so
		 * IRQ is not specified here and handled by
		 * usb_c0_interrupt.
		 */
	};

	chg_port0: isl923x@9 {
		compatible = "intersil,isl923x";
		status = "okay";
		reg = <0x9>;
	};

	tcpc_port0: raa489000@22 {
		compatible = "renesas,raa489000";
		reg = <0x22>;
		tcpc-flags = <(
			TCPC_FLAGS_TCPCI_REV2_0 |
			TCPC_FLAGS_VBUS_MONITOR)>;
	};
};

&i2c4_1 {
	label = "I2C_LCD";
	clock-frequency = <I2C_BITRATE_FAST>;

	lcdctrl: lcd_port@29 {
		reg = <0x29>;
	};

	mpsctrl: pmic_mp2964@20 {
		compatible = "mps,mp2964";
		reg = <0x20>;
	};
};

&i2c5_1 {
	label = "I2C_SUB_C1_TCPC";
	clock-frequency = <I2C_BITRATE_FAST_PLUS>;

	bc12_port1: pi3usb9201@5f {
		compatible = "pericom,pi3usb9201";
		status = "okay";
		reg = <0x5f>;
	};

	chg_port1: isl923x@9 {
		compatible = "intersil,isl923x";
		status = "okay";
		reg = <0x9>;
	};

	tcpc_port1: raa489000@22 {
		compatible = "renesas,raa489000";
		reg = <0x22>;
		tcpc-flags = <(
			TCPC_FLAGS_TCPCI_REV2_0 |
			TCPC_FLAGS_VBUS_MONITOR)>;
	};

	anx7483_mux_1: anx7483-mux-1@3e {
		compatible = "analogix,anx7483";
		reg = <0x3e>;
		board-set = "anx7483_set_default_tuning";
		flags = <USB_MUX_FLAG_RESETS_IN_G3>;
	};
};

&i2c7_0 {
	label = "I2C_BATTERY";
	clock-frequency = <I2C_BITRATE_STANDARD>;
};

/* host interface */
&espi0 {
	status = "okay";
	pinctrl-0 = <&espi_lpc_gp46_47_51_52_53_54_55_57>;
	pinctrl-names = "default";
};

/*
 * Declare GPIOs that have leakage current caused by board issues here. NPCX ec
 * will disable their input buffers before entering deep sleep and restore them
 * after waking up automatically for better power consumption.
 */
&power_leakage_io {
	leak-gpios = <&gpioa 4 GPIO_OPEN_DRAIN
		      &gpiof 1 GPIO_OPEN_DRAIN>;
};
